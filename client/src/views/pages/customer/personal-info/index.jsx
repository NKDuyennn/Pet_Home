import React, { useState, useEffect } from 'react';
import { 
    Button, 
    Avatar, 
    Form, 
    Input, 
    Upload, 
    ConfigProvider, 
    Space,
    Divider,
    Skeleton, // D√πng ƒë·ªÉ t·∫°o loading state si√™u m∆∞·ª£t
    Typography
} from 'antd';
import { 
    UserOutlined, 
    SaveOutlined, 
    MailOutlined,
    CameraOutlined, // Icon cho n√∫t upload
    HomeOutlined,
    PhoneOutlined,
    LockOutlined,
    GlobalOutlined,
    EnvironmentOutlined,
} from '@ant-design/icons';
import { toast } from 'react-toastify';

import useAuth from 'hooks/useAuth';
import auth from 'api/auth';
import './personal-info.scss';

const { Title } = Typography;

// --- SKELETON COMPONENT: Giao di·ªán "x∆∞∆°ng" khi ƒëang t·∫£i d·ªØ li·ªáu ---
// Tr·∫£i nghi·ªám ng∆∞·ªùi d√πng s·∫Ω t·ªët h∆°n r·∫•t nhi·ªÅu so v·ªõi icon loading ƒë∆°n ƒëi·ªáu
const PersonalInfoSkeleton = () => (
    <div className="personal-info-wrapper">
        <Skeleton.Avatar active size={160} shape="circle" />
        <div style={{ width: '100%', maxWidth: 700, marginTop: '20px' }}>
            <Skeleton.Input active block style={{ marginBottom: '24px' }} />
            <Skeleton.Input active block style={{ marginBottom: '24px' }} />
            <Skeleton.Input active block style={{ marginBottom: '24px' }} />
            <Skeleton.Button active block size="large" />
        </div>
    </div>
);

// --- MAIN COMPONENT: Giao di·ªán th√¥ng tin c√° nh√¢n ƒë√£ ƒë∆∞·ª£c "l·ªôt x√°c" ---
const PersonalInfo = () => {
    const [form] = Form.useForm(); // S·ª≠ d·ª•ng hook c·ªßa Form ƒë·ªÉ ki·ªÉm so√°t
    const { userData, updateUserData } = useAuth();
    const [isSendingEmail, setIsSendingEmail] = useState(false);
    const [isSaving, setIsSaving] = useState(false);

    // S·ª≠ d·ª•ng useEffect ƒë·ªÉ ƒëi·ªÅn d·ªØ li·ªáu v√†o form m·ªôt c√°ch an to√†n khi userData c√≥ s·∫µn
    useEffect(() => {
        if (userData) {
            form.setFieldsValue(userData);
        }
    }, [userData, form]);

    // Hi·ªán ƒë·∫°i h√≥a h√†m b·∫±ng async/await cho d·ªÖ ƒë·ªçc v√† b·∫£o tr√¨
    const handleChangePassword = async () => {
        setIsSendingEmail(true);
        try {
            const { data } = await auth.forgotPassword({ email: userData.email });
            if (data.status === 'OK') {
                toast.success('M·ªôt email h∆∞·ªõng d·∫´n ƒë·ªïi m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒëi!');
            }
        } catch (error) {
            console.error(error);
            toast.error('C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i.');
        } finally {
            setIsSendingEmail(false); // Lu√¥n t·∫Øt loading d√π th√†nh c√¥ng hay th·∫•t b·∫°i
        }
    };
    
    // Hi·ªán ƒë·∫°i h√≥a h√†m b·∫±ng async/await
    const handleSubmit = async (values) => {
        setIsSaving(true);
        try {
            // Gi·∫£ l·∫≠p m·ªôt ch√∫t ƒë·ªô tr·ªÖ ƒë·ªÉ th·∫•y hi·ªáu ·ª©ng loading
            await new Promise(resolve => setTimeout(resolve, 500));
            await updateUserData(values); // Gi·∫£ s·ª≠ h√†m n√†y l√† async
            toast.success('C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng! üéâ');
        } catch(error) {
            console.error(error);
            toast.error('C·∫≠p nh·∫≠t th·∫•t b·∫°i, vui l√≤ng ki·ªÉm tra l·∫°i.');
        } finally {
            setIsSaving(false);
        }
    };

    // N·∫øu ch∆∞a c√≥ d·ªØ li·ªáu, hi·ªÉn th·ªã skeleton si√™u x·ªãn
    if (!userData) {
        return <PersonalInfoSkeleton />;
    }
    
    // T√πy ch·ªânh theme v√†ng cho c√°c component Antd
    const antdTheme = {
        token: {
            colorPrimary: '#FCD34D',
            colorInfo: '#FCD34D',
            colorText: '#A16207',
            borderRadius: 12,
        },
    };

    return (
        <ConfigProvider theme={antdTheme}>
            <div className="personal-info-wrapper">
                {/* Avatar c√≥ th·ªÉ upload, kh·ªõp v·ªõi style SCSS */}
                <div className="personal-info__avatar">
                    <Upload
                        name="avatar"
                        showUploadList={false}
                        // action="/your-upload-api" // Thay b·∫±ng API upload c·ªßa b·∫°n
                        // beforeUpload={...}
                        // onChange={...}
                    >
                        <Avatar 
                            src={userData.avatar_url || null} // Hi·ªÉn th·ªã avatar th·∫≠t n·∫øu c√≥
                            icon={<UserOutlined />} 
                        />
                    </Upload>
                </div>

                <Form
                    form={form}
                    onFinish={handleSubmit}
                    labelCol={{ span: 6 }}
                    wrapperCol={{ span: 16 }}
                    style={{ width: '100%', maxWidth: 700 }}
                    initialValues={userData} // Set gi√° tr·ªã ban ƒë·∫ßu
                >
                    <Form.Item label="H·ªç v√† t√™n" name="fullname" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p h·ªç t√™n!' }]}>
                        <Input prefix={<UserOutlined />} placeholder="Nguy·ªÖn VƒÉn A" />
                    </Form.Item>

                    <Form.Item label="Email" name="email">
                        <Input prefix={<MailOutlined />} disabled />
                    </Form.Item>
                    
                    <Form.Item label="S·ªë ƒëi·ªán tho·∫°i" name="phone_numbers" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i!' }]}>
                        <Input prefix={<PhoneOutlined />} placeholder="09xxxxxxxx" />
                    </Form.Item>
                    
                    <Form.Item label="M·∫≠t kh·∫©u" name="password">
                        <Button
                            icon={<LockOutlined />}
                            loading={isSendingEmail}
                            onClick={handleChangePassword}
                        >
                            Y√™u c·∫ßu ƒë·ªïi m·∫≠t kh·∫©u
                        </Button>
                    </Form.Item>

                    {/* Ph√¢n nh√≥m c√°c tr∆∞·ªùng ƒë·ªãa ch·ªâ cho g·ªçn g√†ng */}
                    <Divider orientation="left" style={{borderColor: '#FDE68A'}}>
                        <HomeOutlined /> Th√¥ng tin ƒë·ªãa ch·ªâ
                    </Divider>

                    <Form.Item label="Qu·ªëc gia" name="country">
                        <Input prefix={<GlobalOutlined />} placeholder="Vi·ªát Nam" />
                    </Form.Item>

                    <Form.Item label="Th√†nh ph·ªë" name="city">
                        <Input prefix={<EnvironmentOutlined />} placeholder="TP. H·ªì Ch√≠ Minh" />
                    </Form.Item>

                    <Form.Item label="ƒê·ªãa ch·ªâ c·ª• th·ªÉ" name="address" rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ!' }]}>
                        <Input placeholder="S·ªë nh√†, t√™n ƒë∆∞·ªùng, ph∆∞·ªùng/x√£..." />
                    </Form.Item>

                    {/* Khu v·ª±c n√∫t b·∫•m cu·ªëi form, ƒë∆∞·ª£c cƒÉn ch·ªânh ƒë·∫πp h∆°n */}
                    <Form.Item wrapperCol={{ offset: 6, span: 16 }}>
                        <Button type="primary" htmlType="submit" icon={<SaveOutlined />} loading={isSaving} block>
                            L∆∞u Thay ƒê·ªïi
                        </Button>
                    </Form.Item>
                </Form>
            </div>
        </ConfigProvider>
    );
};

export default PersonalInfo;